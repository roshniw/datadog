{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.1.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ResizeObserverService =\n/** @class */\nfunction () {\n  function ResizeObserverService() {}\n\n  ResizeObserverService.prototype.observeResize = function (element, callback, debounceDelay) {\n    if (debounceDelay === void 0) {\n      debounceDelay = 50;\n    } // put in variable, so available to usePolyfill() function below\n\n\n    var frameworkFactory = this.frameworkOverrides; // this gets fired too often and might cause some relayout issues\n    // so we add a debounce to the callback here to avoid the flashing effect.\n\n    var debouncedCallback = utils_1._.debounce(callback, debounceDelay);\n\n    var useBrowserResizeObserver = function () {\n      var resizeObserver = new window.ResizeObserver(debouncedCallback);\n      resizeObserver.observe(element);\n      return function () {\n        return resizeObserver.disconnect();\n      };\n    };\n\n    var usePolyfill = function () {\n      // initialise to the current width and height, so first call will have no changes\n      var widthLastTime = utils_1._.offsetWidth(element);\n\n      var heightLastTime = utils_1._.offsetHeight(element); // when finished, this gets turned to false.\n\n\n      var running = true;\n\n      var periodicallyCheckWidthAndHeight = function () {\n        if (running) {\n          var newWidth = utils_1._.offsetWidth(element);\n\n          var newHeight = utils_1._.offsetHeight(element);\n\n          var changed = newWidth !== widthLastTime || newHeight !== heightLastTime;\n\n          if (changed) {\n            widthLastTime = newWidth;\n            heightLastTime = newHeight;\n            callback();\n          }\n\n          frameworkFactory.setTimeout(periodicallyCheckWidthAndHeight, debounceDelay);\n        }\n      };\n\n      periodicallyCheckWidthAndHeight(); // the callback function we return sets running to false\n\n      return function () {\n        return running = false;\n      };\n    };\n\n    var suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();\n    var resizeObserverExists = !!window.ResizeObserver;\n\n    if (resizeObserverExists && !suppressResize) {\n      return useBrowserResizeObserver();\n    } else {\n      return usePolyfill();\n    }\n  };\n\n  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], ResizeObserverService.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([context_1.Autowired('frameworkOverrides'), __metadata(\"design:type\", Object)], ResizeObserverService.prototype, \"frameworkOverrides\", void 0);\n\n  ResizeObserverService = __decorate([context_1.Bean('resizeObserverService')], ResizeObserverService);\n  return ResizeObserverService;\n}();\n\nexports.ResizeObserverService = ResizeObserverService;","map":null,"metadata":{},"sourceType":"script"}