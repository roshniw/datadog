{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.1.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar component_1 = require(\"../../widgets/component\");\n\nvar utils_1 = require(\"../../utils\");\n\nfunction Maximizable(target) {\n  var MixinClass =\n  /** @class */\n  function (_super) {\n    __extends(MixinClass, _super);\n\n    function MixinClass() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.MAXIMIZE_BTN_TEMPLATE = \"<div class=\\\"ag-dialog-button\\\"></span>\";\n      _this.isMaximizable = false;\n      _this.isMaximized = false;\n      _this.maximizeListeners = [];\n      _this.resizeListenerDestroy = null;\n      _this.lastPosition = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n      return _this;\n    }\n\n    MixinClass.prototype.postConstruct = function () {\n      _super.prototype.postConstruct.call(this);\n\n      var maximizable = this.config.maximizable;\n\n      if (maximizable) {\n        this.setMaximizable(maximizable);\n      }\n    };\n\n    MixinClass.prototype.setMaximizable = function (maximizable) {\n      var _this = this;\n\n      if (maximizable === false) {\n        this.clearMaximizebleListeners();\n\n        if (this.maximizeButtonComp) {\n          this.maximizeButtonComp.destroy();\n          this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = undefined;\n        }\n\n        return;\n      }\n\n      var eTitleBar = this.eTitleBar;\n\n      if (!eTitleBar || maximizable === this.isMaximizable) {\n        return;\n      }\n\n      var maximizeButtonComp = this.maximizeButtonComp = new component_1.Component(this.MAXIMIZE_BTN_TEMPLATE);\n      this.getContext().wireBean(maximizeButtonComp);\n      var eGui = maximizeButtonComp.getGui();\n      eGui.appendChild(this.maximizeIcon = utils_1._.createIconNoSpan('maximize', this.gridOptionsWrapper));\n      eGui.appendChild(this.minimizeIcon = utils_1._.createIconNoSpan('minimize', this.gridOptionsWrapper));\n\n      utils_1._.addCssClass(this.minimizeIcon, 'ag-hidden');\n\n      maximizeButtonComp.addDestroyableEventListener(eGui, 'click', this.toggleMaximize.bind(this));\n      this.addTitleBarButton(maximizeButtonComp, 0);\n      this.maximizeListeners.push(this.addDestroyableEventListener(eTitleBar, 'dblclick', this.toggleMaximize.bind(this)));\n      this.resizeListenerDestroy = this.addDestroyableEventListener(this, 'resize', function () {\n        _this.isMaximized = false;\n\n        _this.refreshMaximizeIcon();\n      });\n    };\n\n    MixinClass.prototype.toggleMaximize = function () {\n      if (this.isMaximized) {\n        var _a = this.lastPosition,\n            x = _a.x,\n            y = _a.y,\n            width = _a.width,\n            height = _a.height;\n        this.setWidth(width);\n        this.setHeight(height);\n        this.offsetElement(x, y);\n      } else {\n        this.lastPosition.width = this.getWidth();\n        this.lastPosition.height = this.getHeight();\n        this.lastPosition.x = this.position.x;\n        this.lastPosition.y = this.position.y;\n        this.offsetElement(0, 0);\n        this.setHeight(Infinity);\n        this.setWidth(Infinity);\n      }\n\n      this.isMaximized = !this.isMaximized;\n      this.refreshMaximizeIcon();\n    };\n\n    MixinClass.prototype.refreshMaximizeIcon = function () {\n      utils_1._.addOrRemoveCssClass(this.maximizeIcon, 'ag-hidden', this.isMaximized);\n\n      utils_1._.addOrRemoveCssClass(this.minimizeIcon, 'ag-hidden', !this.isMaximized);\n    };\n\n    MixinClass.prototype.clearMaximizebleListeners = function () {\n      if (this.maximizeListeners.length) {\n        this.maximizeListeners.forEach(function (destroyListener) {\n          return destroyListener();\n        });\n        this.maximizeListeners.length = 0;\n      }\n\n      if (this.resizeListenerDestroy) {\n        this.resizeListenerDestroy();\n        this.resizeListenerDestroy = null;\n      }\n    };\n\n    MixinClass.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      if (this.maximizeButtonComp) {\n        this.maximizeButtonComp.destroy();\n        this.maximizeButtonComp = undefined;\n      }\n\n      this.clearMaximizebleListeners();\n    };\n\n    return MixinClass;\n  }(target);\n\n  return MixinClass;\n}\n\nexports.Maximizable = Maximizable;","map":null,"metadata":{},"sourceType":"script"}