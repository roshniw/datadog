{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.1.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar popupService_1 = require(\"../../widgets/popupService\");\n\nvar context_1 = require(\"../../context/context\");\n\nvar gridOptionsWrapper_1 = require(\"../../gridOptionsWrapper\");\n\nvar utils_1 = require(\"../../utils\");\n\nfunction Positionable(target) {\n  var MixinClass =\n  /** @class */\n  function (_super) {\n    __extends(MixinClass, _super);\n\n    function MixinClass() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.positioned = false;\n      _this.dragStartPosition = {\n        x: 0,\n        y: 0\n      };\n      _this.position = {\n        x: 0,\n        y: 0\n      };\n      _this.size = {\n        width: undefined,\n        height: undefined\n      };\n      return _this;\n    }\n\n    MixinClass.prototype.postConstruct = function () {\n      if (this.positioned) {\n        return;\n      }\n\n      var _a = this.config,\n          minWidth = _a.minWidth,\n          width = _a.width,\n          minHeight = _a.minHeight,\n          height = _a.height,\n          centered = _a.centered,\n          x = _a.x,\n          y = _a.y;\n      this.minHeight = minHeight != null ? minHeight : 250;\n      this.minWidth = minWidth != null ? minWidth : 250;\n      this.popupParent = this.popupService.getPopupParent();\n\n      if (width) {\n        this.setWidth(width);\n      }\n\n      if (height) {\n        this.setHeight(height);\n      }\n\n      if (this.renderComponent) {\n        this.renderComponent();\n      }\n\n      if (!width || !height) {\n        this.refreshSize();\n      }\n\n      if (centered) {\n        this.center();\n      } else if (x || y) {\n        this.offsetElement(x, y);\n      }\n\n      this.positioned = true;\n    };\n\n    MixinClass.prototype.updateDragStartPosition = function (x, y) {\n      this.dragStartPosition = {\n        x: x,\n        y: y\n      };\n    };\n\n    MixinClass.prototype.calculateMouseMovement = function (params) {\n      var parentRect = this.popupParent.getBoundingClientRect();\n      var e = params.e,\n          isLeft = params.isLeft,\n          isTop = params.isTop,\n          anywhereWithin = params.anywhereWithin,\n          topBuffer = params.topBuffer;\n      var movementX = e.clientX - this.dragStartPosition.x;\n      var movementY = e.clientY - this.dragStartPosition.y;\n      var width = this.getWidth();\n      var height = this.getHeight(); // skip if cursor is outside of popupParent horizontally\n\n      var skipX = parentRect.left >= e.clientX && this.position.x <= 0 || parentRect.right <= e.clientX && parentRect.right <= this.position.x + parentRect.left + width;\n\n      if (!skipX) {\n        if (isLeft) {\n          skipX = // skip if we are moving to the left and the cursor\n          // is positioned to the right of the left side anchor\n          movementX < 0 && e.clientX > this.position.x + parentRect.left || // skip if we are moving to the right and the cursor\n          // is positioned to the left of the dialog\n          movementX > 0 && e.clientX < this.position.x + parentRect.left;\n        } else {\n          if (anywhereWithin) {\n            // if anywhereWithin is true, we allow to move\n            // as long as the cursor is within the dialog\n            skipX = movementX < 0 && e.clientX > this.position.x + parentRect.left + width || movementX > 0 && e.clientX < this.position.x + parentRect.left;\n          } else {\n            skipX = // if the movement is bound to the right side of the dialog\n            // we skip if we are moving to the left and the cursor\n            // is to the right of the dialog\n            movementX < 0 && e.clientX > this.position.x + parentRect.left + width || // or skip if we are moving to the right and the cursor\n            // is to the left of the right side anchor\n            movementX > 0 && e.clientX < this.position.x + parentRect.left + width;\n          }\n        }\n      }\n\n      movementX = skipX ? 0 : movementX;\n      var skipY = // skip if cursor is outside of popupParent vertically\n      parentRect.top >= e.clientY && this.position.y <= 0 || parentRect.bottom <= e.clientY && parentRect.bottom <= this.position.y + parentRect.top + height || isTop && ( // skip if we are moving to towards top and the cursor is\n      // below the top anchor + topBuffer\n      // note: topBuffer is used when moving the dialog using the title bar\n      movementY < 0 && e.clientY > this.position.y + parentRect.top + (topBuffer || 0) || // skip if we are moving to the bottom and the cursor is\n      // above the top anchor\n      movementY > 0 && e.clientY < this.position.y + parentRect.top) || // we are anchored to the bottom of the dialog\n      !isTop && ( // skip if we are moving towards the top and the cursor\n      // is below the bottom anchor\n      movementY < 0 && e.clientY > this.position.y + parentRect.top + height || // skip if we are moving towards the bottom and the cursor\n      // is above the bottom anchor\n      movementY > 0 && e.clientY < this.position.y + parentRect.top + height);\n      movementY = skipY ? 0 : movementY;\n      return {\n        movementX: movementX,\n        movementY: movementY\n      };\n    };\n\n    MixinClass.prototype.refreshSize = function () {\n      var _a = this.size,\n          width = _a.width,\n          height = _a.height;\n\n      if (!width) {\n        this.setWidth(this.getGui().offsetWidth);\n      }\n\n      if (!height) {\n        this.setHeight(this.getGui().offsetHeight);\n      }\n    };\n\n    MixinClass.prototype.offsetElement = function (x, y) {\n      if (x === void 0) {\n        x = 0;\n      }\n\n      if (y === void 0) {\n        y = 0;\n      }\n\n      var ePopup = this.getGui();\n      this.popupService.positionPopup({\n        ePopup: ePopup,\n        x: x,\n        y: y,\n        minWidth: this.minWidth,\n        minHeight: this.minHeight,\n        keepWithinBounds: true\n      });\n      this.position.x = parseInt(ePopup.style.left, 10);\n      this.position.y = parseInt(ePopup.style.top, 10);\n    };\n\n    MixinClass.prototype.getHeight = function () {\n      return this.size.height;\n    };\n\n    MixinClass.prototype.setHeight = function (height) {\n      var eGui = this.getGui();\n      var isPercent = false;\n\n      if (typeof height === 'string' && height.indexOf('%') !== -1) {\n        utils_1._.setFixedHeight(eGui, height);\n\n        height = utils_1._.getAbsoluteHeight(eGui);\n        isPercent = true;\n      } else {\n        height = Math.max(this.minHeight, height);\n        var offsetParent = eGui.offsetParent;\n\n        if (offsetParent && offsetParent.clientHeight && height + this.position.y > offsetParent.clientHeight) {\n          height = offsetParent.clientHeight - this.position.y;\n        }\n      }\n\n      if (this.size.height === height) {\n        return;\n      }\n\n      this.size.height = height;\n\n      if (!isPercent) {\n        utils_1._.setFixedHeight(eGui, height);\n      }\n    };\n\n    MixinClass.prototype.getWidth = function () {\n      return this.size.width;\n    };\n\n    MixinClass.prototype.setWidth = function (width) {\n      var eGui = this.getGui();\n      var isPercent = false;\n\n      if (typeof width === 'string' && width.indexOf('%') !== -1) {\n        utils_1._.setFixedWidth(eGui, width);\n\n        width = utils_1._.getAbsoluteWidth(eGui);\n        isPercent = true;\n      } else {\n        width = Math.max(this.minWidth, width);\n        var offsetParent = eGui.offsetParent;\n\n        if (offsetParent && offsetParent.clientWidth && width + this.position.x > offsetParent.clientWidth) {\n          width = offsetParent.clientWidth - this.position.x;\n        }\n      }\n\n      if (this.size.width === width) {\n        return;\n      }\n\n      this.size.width = width;\n\n      if (!isPercent) {\n        utils_1._.setFixedWidth(eGui, width);\n      }\n    };\n\n    MixinClass.prototype.center = function () {\n      var eGui = this.getGui();\n      var x = eGui.offsetParent.clientWidth / 2 - this.getWidth() / 2;\n      var y = eGui.offsetParent.clientHeight / 2 - this.getHeight() / 2;\n      this.offsetElement(x, y);\n    };\n\n    __decorate([context_1.Autowired('popupService'), __metadata(\"design:type\", popupService_1.PopupService)], MixinClass.prototype, \"popupService\", void 0);\n\n    __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)], MixinClass.prototype, \"gridOptionsWrapper\", void 0);\n\n    return MixinClass;\n  }(target);\n\n  return MixinClass;\n}\n\nexports.Positionable = Positionable;","map":null,"metadata":{},"sourceType":"script"}