{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.1.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\n\nvar selectionController_1 = require(\"./selectionController\");\n\nvar columnApi_1 = require(\"./columnController/columnApi\");\n\nvar columnController_1 = require(\"./columnController/columnController\");\n\nvar rowRenderer_1 = require(\"./rendering/rowRenderer\");\n\nvar headerRootComp_1 = require(\"./headerRendering/headerRootComp\");\n\nvar filterManager_1 = require(\"./filter/filterManager\");\n\nvar valueService_1 = require(\"./valueService/valueService\");\n\nvar eventService_1 = require(\"./eventService\");\n\nvar gridPanel_1 = require(\"./gridPanel/gridPanel\");\n\nvar gridApi_1 = require(\"./gridApi\");\n\nvar columnFactory_1 = require(\"./columnController/columnFactory\");\n\nvar displayedGroupCreator_1 = require(\"./columnController/displayedGroupCreator\");\n\nvar expressionService_1 = require(\"./valueService/expressionService\");\n\nvar templateService_1 = require(\"./templateService\");\n\nvar popupService_1 = require(\"./widgets/popupService\");\n\nvar logger_1 = require(\"./logger\");\n\nvar columnUtils_1 = require(\"./columnController/columnUtils\");\n\nvar autoWidthCalculator_1 = require(\"./rendering/autoWidthCalculator\");\n\nvar horizontalResizeService_1 = require(\"./headerRendering/horizontalResizeService\");\n\nvar context_1 = require(\"./context/context\");\n\nvar csvCreator_1 = require(\"./exporter/csvCreator\");\n\nvar gridCore_1 = require(\"./gridCore\");\n\nvar standardMenu_1 = require(\"./headerRendering/standardMenu\");\n\nvar dragAndDropService_1 = require(\"./dragAndDrop/dragAndDropService\");\n\nvar dragService_1 = require(\"./dragAndDrop/dragService\");\n\nvar sortController_1 = require(\"./sortController\");\n\nvar focusedCellController_1 = require(\"./focusedCellController\");\n\nvar mouseEventService_1 = require(\"./gridPanel/mouseEventService\");\n\nvar cellNavigationService_1 = require(\"./cellNavigationService\");\n\nvar filterStage_1 = require(\"./rowModels/clientSide/filterStage\");\n\nvar sortStage_1 = require(\"./rowModels/clientSide/sortStage\");\n\nvar flattenStage_1 = require(\"./rowModels/clientSide/flattenStage\");\n\nvar events_1 = require(\"./events\");\n\nvar infiniteRowModel_1 = require(\"./rowModels/infinite/infiniteRowModel\");\n\nvar clientSideRowModel_1 = require(\"./rowModels/clientSide/clientSideRowModel\");\n\nvar cellRendererFactory_1 = require(\"./rendering/cellRendererFactory\");\n\nvar valueFormatterService_1 = require(\"./rendering/valueFormatterService\");\n\nvar agCheckbox_1 = require(\"./widgets/agCheckbox\");\n\nvar agRadioButton_1 = require(\"./widgets/agRadioButton\");\n\nvar vanillaFrameworkOverrides_1 = require(\"./vanillaFrameworkOverrides\");\n\nvar scrollVisibleService_1 = require(\"./gridPanel/scrollVisibleService\");\n\nvar downloader_1 = require(\"./exporter/downloader\");\n\nvar xmlFactory_1 = require(\"./exporter/xmlFactory\");\n\nvar gridSerializer_1 = require(\"./exporter/gridSerializer\");\n\nvar stylingService_1 = require(\"./styling/stylingService\");\n\nvar columnHoverService_1 = require(\"./rendering/columnHoverService\");\n\nvar columnAnimationService_1 = require(\"./rendering/columnAnimationService\");\n\nvar sortService_1 = require(\"./rowNodes/sortService\");\n\nvar filterService_1 = require(\"./rowNodes/filterService\");\n\nvar autoGroupColService_1 = require(\"./columnController/autoGroupColService\");\n\nvar paginationProxy_1 = require(\"./rowModels/paginationProxy\");\n\nvar immutableService_1 = require(\"./rowModels/clientSide/immutableService\");\n\nvar constants_1 = require(\"./constants\");\n\nvar valueCache_1 = require(\"./valueService/valueCache\");\n\nvar changeDetectionService_1 = require(\"./valueService/changeDetectionService\");\n\nvar alignedGridsService_1 = require(\"./alignedGridsService\");\n\nvar pinnedRowModel_1 = require(\"./rowModels/pinnedRowModel\");\n\nvar userComponentFactory_1 = require(\"./components/framework/userComponentFactory\");\n\nvar userComponentRegistry_1 = require(\"./components/framework/userComponentRegistry\");\n\nvar agComponentUtils_1 = require(\"./components/framework/agComponentUtils\");\n\nvar componentMetadataProvider_1 = require(\"./components/framework/componentMetadataProvider\");\n\nvar beans_1 = require(\"./rendering/beans\");\n\nvar environment_1 = require(\"./environment\");\n\nvar animationFrameService_1 = require(\"./misc/animationFrameService\");\n\nvar navigationService_1 = require(\"./gridPanel/navigationService\");\n\nvar maxDivHeightScaler_1 = require(\"./rendering/maxDivHeightScaler\");\n\nvar selectableService_1 = require(\"./rowNodes/selectableService\");\n\nvar autoHeightCalculator_1 = require(\"./rendering/autoHeightCalculator\");\n\nvar paginationComp_1 = require(\"./rowModels/pagination/paginationComp\");\n\nvar resizeObserverService_1 = require(\"./misc/resizeObserverService\");\n\nvar zipContainer_1 = require(\"./exporter/files/zip/zipContainer\");\n\nvar tooltipManager_1 = require(\"./widgets/tooltipManager\");\n\nvar overlayWrapperComponent_1 = require(\"./rendering/overlays/overlayWrapperComponent\");\n\nvar agGroupComponent_1 = require(\"./widgets/agGroupComponent\");\n\nvar agDialog_1 = require(\"./widgets/agDialog\");\n\nvar agPanel_1 = require(\"./widgets/agPanel\");\n\nvar agInputTextField_1 = require(\"./widgets/agInputTextField\");\n\nvar agInputTextArea_1 = require(\"./widgets/agInputTextArea\");\n\nvar agSlider_1 = require(\"./widgets/agSlider\");\n\nvar utils_1 = require(\"./utils\");\n\nvar agColorPicker_1 = require(\"./widgets/agColorPicker\");\n\nvar agInputNumberField_1 = require(\"./widgets/agInputNumberField\");\n\nvar agInputRange_1 = require(\"./widgets/agInputRange\");\n\nvar agSelect_1 = require(\"./widgets/agSelect\");\n\nvar agAngleSelect_1 = require(\"./widgets/agAngleSelect\");\n\nvar agToggleButton_1 = require(\"./widgets/agToggleButton\");\n\nvar detailRowCompCache_1 = require(\"./rendering/detailRowCompCache\");\n\nvar Grid =\n/** @class */\nfunction () {\n  function Grid(eGridDiv, gridOptions, params) {\n    if (!eGridDiv) {\n      console.error('ag-Grid: no div element provided to the grid');\n    }\n\n    if (!gridOptions) {\n      console.error('ag-Grid: no gridOptions provided to the grid');\n    }\n\n    this.gridOptions = gridOptions;\n    var rowModelClass = this.getRowModelClass(gridOptions);\n    var enterprise = !utils_1._.missingOrEmpty(Grid.enterpriseBeans);\n    var moduleBeans = this.extractModuleEntity(Grid.modulesToInclude, function (module) {\n      return module.beans ? module.beans : [];\n    });\n    var moduleEnterpriseBeans = this.extractModuleEntity(Grid.modulesToInclude, function (module) {\n      return module.enterpriseBeans ? module.enterpriseBeans : [];\n    });\n    var moduleEnterpriseComponents = this.extractModuleEntity(Grid.modulesToInclude, function (module) {\n      return module.enterpriseComponents ? module.enterpriseComponents : [];\n    });\n    var modulesEnterpriseDefaultComponents = this.extractModuleEntity(Grid.modulesToInclude, function (module) {\n      return module.enterpriseDefaultComponents ? module.enterpriseDefaultComponents : [];\n    });\n    var frameworkOverrides = params ? params.frameworkOverrides : null;\n\n    if (utils_1._.missing(frameworkOverrides)) {\n      frameworkOverrides = new vanillaFrameworkOverrides_1.VanillaFrameworkOverrides();\n    }\n\n    var overrideBeans = [];\n\n    if (Grid.enterpriseBeans) {\n      overrideBeans = overrideBeans.concat(Grid.enterpriseBeans).concat(moduleEnterpriseBeans);\n    }\n\n    if (Grid.frameworkBeans) {\n      overrideBeans = overrideBeans.concat(Grid.frameworkBeans);\n    }\n\n    var seed = {\n      enterprise: enterprise,\n      gridOptions: gridOptions,\n      eGridDiv: eGridDiv,\n      $scope: params ? params.$scope : null,\n      $compile: params ? params.$compile : null,\n      quickFilterOnScope: params ? params.quickFilterOnScope : null,\n      globalEventListener: params ? params.globalEventListener : null,\n      frameworkOverrides: frameworkOverrides\n    };\n\n    if (params && params.seedBeanInstances) {\n      utils_1._.assign(seed, params.seedBeanInstances);\n    }\n\n    var components = [{\n      componentName: 'AgCheckbox',\n      theClass: agCheckbox_1.AgCheckbox\n    }, {\n      componentName: 'AgRadioButton',\n      theClass: agRadioButton_1.AgRadioButton\n    }, {\n      componentName: 'AgToggleButton',\n      theClass: agToggleButton_1.AgToggleButton\n    }, {\n      componentName: 'AgInputTextField',\n      theClass: agInputTextField_1.AgInputTextField\n    }, {\n      componentName: 'AgInputTextArea',\n      theClass: agInputTextArea_1.AgInputTextArea\n    }, {\n      componentName: 'AgInputNumberField',\n      theClass: agInputNumberField_1.AgInputNumberField\n    }, {\n      componentName: 'AgInputRange',\n      theClass: agInputRange_1.AgInputRange\n    }, {\n      componentName: 'AgSelect',\n      theClass: agSelect_1.AgSelect\n    }, {\n      componentName: 'AgSlider',\n      theClass: agSlider_1.AgSlider\n    }, {\n      componentName: 'AgAngleSelect',\n      theClass: agAngleSelect_1.AgAngleSelect\n    }, {\n      componentName: 'AgColorPicker',\n      theClass: agColorPicker_1.AgColorPicker\n    }, {\n      componentName: 'AgGridComp',\n      theClass: gridPanel_1.GridPanel\n    }, {\n      componentName: 'AgHeaderRoot',\n      theClass: headerRootComp_1.HeaderRootComp\n    }, {\n      componentName: 'AgPagination',\n      theClass: paginationComp_1.PaginationComp\n    }, {\n      componentName: 'AgOverlayWrapper',\n      theClass: overlayWrapperComponent_1.OverlayWrapperComponent\n    }, {\n      componentName: 'AgGroupComponent',\n      theClass: agGroupComponent_1.AgGroupComponent\n    }, {\n      componentName: 'AgPanel',\n      theClass: agPanel_1.AgPanel\n    }, {\n      componentName: 'AgDialog',\n      theClass: agDialog_1.AgDialog\n    }];\n\n    if (Grid.enterpriseComponents) {\n      components = components.concat(Grid.enterpriseComponents).concat(moduleEnterpriseComponents);\n    }\n\n    var contextParams = {\n      overrideBeans: overrideBeans,\n      seed: seed,\n      //Careful with the order of the beans here, there are dependencies between them that need to be kept\n      beans: [// this should only contain SERVICES, it should NEVER contain COMPONENTS\n      rowModelClass, beans_1.Beans, paginationProxy_1.PaginationAutoPageSizeService, gridApi_1.GridApi, userComponentRegistry_1.UserComponentRegistry, agComponentUtils_1.AgComponentUtils, componentMetadataProvider_1.ComponentMetadataProvider, resizeObserverService_1.ResizeObserverService, userComponentRegistry_1.UserComponentRegistry, userComponentFactory_1.UserComponentFactory, maxDivHeightScaler_1.MaxDivHeightScaler, autoHeightCalculator_1.AutoHeightCalculator, cellRendererFactory_1.CellRendererFactory, horizontalResizeService_1.HorizontalResizeService, pinnedRowModel_1.PinnedRowModel, dragService_1.DragService, displayedGroupCreator_1.DisplayedGroupCreator, eventService_1.EventService, gridOptionsWrapper_1.GridOptionsWrapper, popupService_1.PopupService, selectionController_1.SelectionController, filterManager_1.FilterManager, columnController_1.ColumnController, paginationProxy_1.PaginationProxy, rowRenderer_1.RowRenderer, expressionService_1.ExpressionService, columnFactory_1.ColumnFactory, csvCreator_1.CsvCreator, downloader_1.Downloader, xmlFactory_1.XmlFactory, gridSerializer_1.GridSerializer, templateService_1.TemplateService, alignedGridsService_1.AlignedGridsService, navigationService_1.NavigationService, popupService_1.PopupService, valueCache_1.ValueCache, valueService_1.ValueService, logger_1.LoggerFactory, columnUtils_1.ColumnUtils, autoWidthCalculator_1.AutoWidthCalculator, standardMenu_1.StandardMenuFactory, dragAndDropService_1.DragAndDropService, columnApi_1.ColumnApi, focusedCellController_1.FocusedCellController, mouseEventService_1.MouseEventService, environment_1.Environment, cellNavigationService_1.CellNavigationService, filterStage_1.FilterStage, sortStage_1.SortStage, flattenStage_1.FlattenStage, filterService_1.FilterService, valueFormatterService_1.ValueFormatterService, stylingService_1.StylingService, scrollVisibleService_1.ScrollVisibleService, sortController_1.SortController, columnHoverService_1.ColumnHoverService, columnAnimationService_1.ColumnAnimationService, sortService_1.SortService, selectableService_1.SelectableService, autoGroupColService_1.AutoGroupColService, immutableService_1.ImmutableService, changeDetectionService_1.ChangeDetectionService, animationFrameService_1.AnimationFrameService, tooltipManager_1.TooltipManager, zipContainer_1.ZipContainer, detailRowCompCache_1.DetailRowCompCache].concat(moduleBeans),\n      components: components,\n      enterpriseDefaultComponents: Grid.enterpriseDefaultComponents.concat(modulesEnterpriseDefaultComponents),\n      registeredModules: Grid.modulesToInclude.map(function (module) {\n        return module.moduleName;\n      }),\n      debug: !!gridOptions.debug\n    };\n    this.logger = new logger_1.Logger('ag-Grid', function () {\n      return gridOptions.debug;\n    });\n    var contextLogger = new logger_1.Logger('Context', function () {\n      return contextParams.debug;\n    });\n    this.context = new context_1.Context(contextParams, contextLogger);\n    var gridCore = new gridCore_1.GridCore();\n    this.context.wireBean(gridCore);\n    this.setColumnsAndData();\n    this.dispatchGridReadyEvent(gridOptions);\n    this.logger.log(\"initialised successfully, enterprise = \" + enterprise);\n  }\n\n  Grid.setEnterpriseBeans = function (enterpriseBeans, rowModelClasses) {\n    Grid.enterpriseBeans = enterpriseBeans; // the enterprise can inject additional row models. this is how it injects the viewportRowModel\n\n    utils_1._.iterateObject(rowModelClasses, function (key, value) {\n      return Grid.RowModelClasses[key] = value;\n    });\n  };\n\n  Grid.setEnterpriseComponents = function (components) {\n    Grid.enterpriseComponents = components;\n  };\n\n  Grid.setFrameworkBeans = function (frameworkBeans) {\n    Grid.frameworkBeans = frameworkBeans;\n  };\n\n  Grid.setEnterpriseDefaultComponents = function (enterpriseDefaultComponents) {\n    Grid.enterpriseDefaultComponents = enterpriseDefaultComponents;\n  };\n\n  Grid.addModule = function (modulesToInclude) {\n    var _a; // de-duping would need to be done here (while ensuring order etc)\n\n\n    (_a = Grid.modulesToInclude).push.apply(_a, modulesToInclude);\n  };\n\n  Grid.prototype.extractModuleEntity = function (moduleEntities, extractor) {\n    return [].concat.apply([], moduleEntities.map(extractor));\n  };\n\n  Grid.prototype.setColumnsAndData = function () {\n    var gridOptionsWrapper = this.context.getBean('gridOptionsWrapper');\n    var columnController = this.context.getBean('columnController');\n    var rowModel = this.context.getBean('rowModel');\n    var columnDefs = gridOptionsWrapper.getColumnDefs();\n    var rowData = gridOptionsWrapper.getRowData();\n\n    var nothingToSet = utils_1._.missing(columnDefs) && utils_1._.missing(rowData);\n\n    if (nothingToSet) {\n      return;\n    }\n\n    if (utils_1._.exists(columnDefs)) {\n      columnController.setColumnDefs(columnDefs, \"gridInitializing\");\n    }\n\n    if (utils_1._.exists(rowData) && rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      var clientSideRowModel = rowModel;\n      clientSideRowModel.setRowData(rowData);\n    }\n  };\n\n  Grid.prototype.dispatchGridReadyEvent = function (gridOptions) {\n    var eventService = this.context.getBean('eventService');\n    var readyEvent = {\n      type: events_1.Events.EVENT_GRID_READY,\n      api: gridOptions.api,\n      columnApi: gridOptions.columnApi\n    };\n    eventService.dispatchEvent(readyEvent);\n  };\n\n  Grid.prototype.getRowModelClass = function (gridOptions) {\n    var rowModelType = gridOptions.rowModelType; //TODO: temporary measure before 'enterprise' is completely removed (similar handling in gridOptionsWrapper is also required)\n\n    rowModelType = rowModelType === 'enterprise' ? constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE : rowModelType;\n\n    if (utils_1._.exists(rowModelType)) {\n      var rowModelClass = Grid.RowModelClasses[rowModelType];\n\n      if (utils_1._.exists(rowModelClass)) {\n        return rowModelClass;\n      } else {\n        if (rowModelType === 'normal') {\n          console.warn(\"ag-Grid: normal rowModel deprecated. Should now be called client side row model instead.\");\n          return clientSideRowModel_1.ClientSideRowModel;\n        }\n\n        console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);\n\n        if (rowModelType === constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT) {\n          console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');\n        }\n\n        if (rowModelType === constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE) {\n          console.error('ag-Grid: rowModelType server side is only available in ag-Grid Enterprise');\n        }\n      }\n    }\n\n    return clientSideRowModel_1.ClientSideRowModel;\n  };\n\n  Grid.prototype.destroy = function () {\n    this.gridOptions.api.destroy();\n  };\n\n  Grid.enterpriseBeans = [];\n  Grid.enterpriseComponents = [];\n  Grid.enterpriseDefaultComponents = [];\n  Grid.modulesToInclude = []; // the default is ClientSideRowModel, which is also used for pagination.\n  // the enterprise adds viewport to this list.\n\n  Grid.RowModelClasses = {\n    infinite: infiniteRowModel_1.InfiniteRowModel,\n    clientSide: clientSideRowModel_1.ClientSideRowModel\n  };\n  return Grid;\n}();\n\nexports.Grid = Grid;","map":null,"metadata":{},"sourceType":"script"}