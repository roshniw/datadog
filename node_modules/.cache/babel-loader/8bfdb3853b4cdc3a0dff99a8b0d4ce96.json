{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.1.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar context_1 = require(\"../../context/context\");\n\nvar dragService_1 = require(\"../../dragAndDrop/dragService\");\n\nfunction Resizable(target) {\n  var MixinClass =\n  /** @class */\n  function (_super) {\n    __extends(MixinClass, _super);\n\n    function MixinClass() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.RESIZE_TEMPLATE = \"\\n            <div class=\\\"ag-resizer-wrapper\\\">\\n                <div ref=\\\"eTopLeftResizer\\\" class=\\\"ag-resizer ag-resizer-topLeft\\\"></div>\\n                <div ref=\\\"eTopResizer\\\" class=\\\"ag-resizer ag-resizer-top\\\"></div>\\n                <div ref=\\\"eTopRightResizer\\\" class=\\\"ag-resizer ag-resizer-topRight\\\"></div>\\n                <div ref=\\\"eRightResizer\\\" class=\\\"ag-resizer ag-resizer-right\\\"></div>\\n                <div ref=\\\"eBottomRightResizer\\\" class=\\\"ag-resizer ag-resizer-bottomRight\\\"></div>\\n                <div ref=\\\"eBottomResizer\\\" class=\\\"ag-resizer ag-resizer-bottom\\\"></div>\\n                <div ref=\\\"eBottomLeftResizer\\\" class=\\\"ag-resizer ag-resizer-bottomLeft\\\"></div>\\n                <div ref=\\\"eLeftResizer\\\" class=\\\"ag-resizer ag-resizer-left\\\"></div>\\n            </div>\\n        \";\n      _this.resizable = {};\n      _this.isResizable = false;\n      _this.isResizing = false;\n      _this.lastPosition = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n      return _this;\n    }\n\n    MixinClass.prototype.postConstruct = function () {\n      _super.prototype.postConstruct.call(this);\n\n      var resizable = this.config.resizable;\n      this.addResizers();\n\n      if (resizable) {\n        this.setResizable(resizable);\n      }\n    };\n\n    MixinClass.prototype.addResizers = function () {\n      var eGui = this.getGui();\n\n      if (!eGui) {\n        return;\n      }\n\n      var parser = new DOMParser();\n      var resizers = parser.parseFromString(this.RESIZE_TEMPLATE, 'text/html').body;\n      eGui.appendChild(resizers.firstChild);\n      this.createMap();\n    };\n\n    MixinClass.prototype.createMap = function () {\n      var eGui = this.getGui();\n      this.resizerMap = {\n        topLeft: {\n          element: eGui.querySelector('[ref=eTopLeftResizer]')\n        },\n        top: {\n          element: eGui.querySelector('[ref=eTopResizer]')\n        },\n        topRight: {\n          element: eGui.querySelector('[ref=eTopRightResizer]')\n        },\n        right: {\n          element: eGui.querySelector('[ref=eRightResizer]')\n        },\n        bottomRight: {\n          element: eGui.querySelector('[ref=eBottomRightResizer]')\n        },\n        bottom: {\n          element: eGui.querySelector('[ref=eBottomResizer]')\n        },\n        bottomLeft: {\n          element: eGui.querySelector('[ref=eBottomLeftResizer]')\n        },\n        left: {\n          element: eGui.querySelector('[ref=eLeftResizer]')\n        }\n      };\n    };\n\n    MixinClass.prototype.getResizerElement = function (side) {\n      return this.resizerMap[side].element;\n    };\n\n    MixinClass.prototype.onResizeStart = function (e) {\n      this.isResizing = true;\n      this.updateDragStartPosition(e.clientX, e.clientY);\n    };\n\n    MixinClass.prototype.onResize = function (e, side) {\n      if (!this.isResizing) {\n        return;\n      }\n\n      var isLeft = !!side.match(/left/i);\n      var isRight = !!side.match(/right/i);\n      var isTop = !!side.match(/top/i);\n      var isBottom = !!side.match(/bottom/i);\n      var isHorizontal = isLeft || isRight;\n      var isVertical = isTop || isBottom;\n\n      var _a = this.calculateMouseMovement({\n        e: e,\n        isLeft: isLeft,\n        isTop: isTop\n      }),\n          movementX = _a.movementX,\n          movementY = _a.movementY;\n\n      var offsetLeft = 0;\n      var offsetTop = 0;\n\n      if (isHorizontal && movementX) {\n        var direction = isLeft ? -1 : 1;\n        var oldWidth = this.getWidth();\n        var newWidth = oldWidth + movementX * direction;\n        var skipWidth = false;\n\n        if (isLeft) {\n          offsetLeft = oldWidth - newWidth;\n\n          if (this.position.x + offsetLeft <= 0 || newWidth <= this.minWidth) {\n            skipWidth = true;\n            offsetLeft = 0;\n          }\n        }\n\n        if (!skipWidth) {\n          this.setWidth(newWidth);\n        }\n      }\n\n      if (isVertical && movementY) {\n        var direction = isTop ? -1 : 1;\n        var oldHeight = this.getHeight();\n        var newHeight = oldHeight + movementY * direction;\n        var skipHeight = false;\n\n        if (isTop) {\n          offsetTop = oldHeight - newHeight;\n\n          if (this.position.y + offsetTop <= 0 || newHeight <= this.minHeight) {\n            skipHeight = true;\n            offsetTop = 0;\n          }\n        }\n\n        if (!skipHeight) {\n          this.setHeight(newHeight);\n        }\n      }\n\n      this.updateDragStartPosition(e.clientX, e.clientY);\n\n      if (offsetLeft || offsetTop) {\n        this.offsetElement(this.position.x + offsetLeft, this.position.y + offsetTop);\n      }\n    };\n\n    MixinClass.prototype.onResizeEnd = function () {\n      this.isResizing = false;\n      var params = {\n        type: 'resize',\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi()\n      };\n\n      if (this.localEventService) {\n        this.localEventService.dispatchEvent(params);\n      }\n    };\n\n    MixinClass.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this.setResizable(false);\n    };\n\n    MixinClass.prototype.setResizable = function (resizable) {\n      var _this = this;\n\n      var isResizable = false;\n\n      if (typeof resizable === 'boolean') {\n        resizable = {\n          topLeft: resizable,\n          top: resizable,\n          topRight: resizable,\n          right: resizable,\n          bottomRight: resizable,\n          bottom: resizable,\n          bottomLeft: resizable,\n          left: resizable\n        };\n      }\n\n      Object.keys(resizable).forEach(function (side) {\n        var r = resizable;\n        var s = side;\n        var val = !!r[s];\n\n        var el = _this.getResizerElement(s);\n\n        var params = _this.resizerMap[s].dragSource || {\n          eElement: el,\n          onDragStart: _this.onResizeStart.bind(_this),\n          onDragging: function (e) {\n            return _this.onResize(e, s);\n          },\n          onDragStop: _this.onResizeEnd.bind(_this)\n        };\n\n        if (!!_this.resizable[s] !== val || !_this.isAlive() && !val) {\n          if (val) {\n            _this.dragService.addDragSource(params);\n\n            el.style.pointerEvents = 'all';\n            isResizable = true;\n          } else {\n            _this.dragService.removeDragSource(params);\n\n            el.style.pointerEvents = 'none';\n          }\n\n          _this.resizerMap[s].dragSource = val ? params : undefined;\n        }\n      });\n      this.isResizable = isResizable;\n    };\n\n    __decorate([context_1.Autowired('dragService'), __metadata(\"design:type\", dragService_1.DragService)], MixinClass.prototype, \"dragService\", void 0);\n\n    return MixinClass;\n  }(target);\n\n  return MixinClass;\n}\n\nexports.Resizable = Resizable;","map":null,"metadata":{},"sourceType":"script"}